using Noggog;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.FormKeys.Fallout4;


namespace UnleveledFallout
{
    public struct RaceEntry
    {
        public bool hasConfig = false;
        public float lvlMin = float.MaxValue;
        public float lvlMax = -1;
        public float healthMin = float.MaxValue;
        public float healthMax = -1;
        public float healthMinMod = float.MaxValue; // Modded health values are to be updated when NPCs are unleveled (they can get higher health than the previous max)
        public float healthMaxMod = -1; // to keep the ratios between 0..1 so the new health values don't exceed the player-given parameters.
        public float physResMin = float.MaxValue;
        public float physResMax = -1;
        public float energyResMin = float.MaxValue;
        public float energyResMax = -1;
        public float configHealthMin = -1;
        public float configHealthMax = -1;
        public float configPhysResMin = -1;
        public float configPhysResMax = -1;
        public float configEnergyResMin = -1;
        public float configEnergyResMax = -1;

        public RaceEntry() {}
    }

    public class Program
    {
        private static Lazy<UnleveledFalloutConfig> _config = null!;

        public static UnleveledFalloutConfig Settings => _config.Value;

        public static readonly Dictionary<IFormLinkGetter<IRaceGetter>, RaceEntry> RaceEntries = new();

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<IFallout4Mod, IFallout4ModGetter>(RunPatch)
                .SetAutogeneratedSettings("settings", "settings.json", out _config)
                .SetTypicalOpen(GameRelease.Fallout4, "YourPatcher.esp")
                .Run(args);
        }

        public static IObjectPropertyGetter GetAV(INpcGetter npcGetter, IFormLink<IActorValueInformationGetter> actorValue)
        {
            try
            {
                return npcGetter.Properties.EmptyIfNull().First(prop => prop.ActorValue.Equals(actorValue));
            }
            catch
            {
                return new ObjectProperty() { ActorValue = actorValue, Value = 0.0f };
            }
        }

        public static IObjectPropertyGetter GetAV(IRaceGetter raceGetter, IFormLink<IActorValueInformationGetter> actorValue)
        {
            try
            {
                return raceGetter.Properties.EmptyIfNull().First(prop => prop.ActorValue.Equals(actorValue));
            }
            catch
            {
                return new ObjectProperty() { ActorValue = actorValue, Value = 0.0f };
            }
        }

        public static ObjectProperty GetOrAddAV(Npc npcSetter, IFormLink<IActorValueInformationGetter> actorValue)
        {
            ObjectProperty retAV;

            try
            {
                retAV = npcSetter.Properties.EmptyIfNull().First(prop => prop.ActorValue.Equals(actorValue));
            }
            catch
            {
                retAV = new() { ActorValue = actorValue, Value = 0.0f };
                npcSetter.Properties ??= new();
                npcSetter.Properties.Add(retAV);
            }

            return retAV;
        }

        public static float GetScaledAV(float currAV, float minAV, float maxAV, float configMin, float configMax)
        {
            return (minAV == maxAV || configMax == configMin) ? (configMax + configMin) / 2 : (currAV - minAV) / (maxAV - minAV) * (configMax - configMin) + configMin;
        }

        public static float GetTotalAV(IPatcherState<IFallout4Mod, IFallout4ModGetter> state, INpcGetter npcGetter, IFormLink<IActorValueInformationGetter> actorValue)
        {
            /*if (npcGetter.UseTemplateActors.HasFlag(Npc.TemplateActorType.Stats))
                throw new Exception($"Can't calculate actor value for {npcGetter} because it inherits stats from a template");*/

            if (!npcGetter.Race.TryResolve(state.LinkCache, out var raceGetter))
                throw new Exception($"Could not resolve {npcGetter.Race} for record {npcGetter}");

            return GetAV(raceGetter, actorValue).Value + GetAV(npcGetter, actorValue).Value;
        }

        public static bool UnlevelNPC(Npc npcSetter)
        {
            if (npcSetter.Level is not PcLevelMult levelMult)
                return false;

            float minLevel = Math.Max((int)npcSetter.CalcMinLevel, 2) * levelMult.LevelMult;
            float maxLevel = npcSetter.CalcMaxLevel <= 0 ? (npcSetter.CalcMinLevel < 70 ? 80 : 100) : npcSetter.CalcMaxLevel;
            // Average of min and max level, where min is at least 2 * levelmult.
            short averageLevel = (short)Math.Round((minLevel + maxLevel) / 2);
            npcSetter.Level = new NpcLevel() { Level = averageLevel };

            return true;
        }

        public static bool BalanceLeveledNPCs(IPatcherState<IFallout4Mod, IFallout4ModGetter> state, Npc npcSetter, bool wasUnleveled)
        {
            if (!wasUnleveled)
                return false;

            if (!RaceEntries.TryGetValue(npcSetter.Race, out var raceEntry))
                return false;

            var npcHealth = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.Health);
            var healthAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.Health);

            float lvlRatio = (((NpcLevel)npcSetter.Level).Level - raceEntry.lvlMin) / (raceEntry.lvlMax - raceEntry.lvlMin);
            float newHealth = lvlRatio * (raceEntry.healthMax - raceEntry.healthMin) + raceEntry.healthMin;
            healthAV.Value = newHealth - (npcHealth - healthAV.Value);

            // Don't update race entry values for npcs that inherit stats, their stats are only changed for safety reasons.
            if (npcSetter.UseTemplateActors.HasFlag(Npc.TemplateActorType.Stats))
                return true;

            if (raceEntry.healthMaxMod < newHealth)
                raceEntry.healthMaxMod = newHealth;
            else if (raceEntry.healthMinMod > newHealth)
                raceEntry.healthMinMod = newHealth;

            RaceEntries[npcSetter.Race] = raceEntry;

            return true;
        }

        public static bool ApplyValueModifiers(IPatcherState<IFallout4Mod, IFallout4ModGetter> state, Npc npcSetter)
        {
            bool wasChanged = false;
            if (Settings.ValueModifiers.HealthScale != 1 || Settings.ValueModifiers.HealthShift != 0)
            {
                var healthAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.Health);
                var totalHealth = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.Health);
                healthAV.Value = totalHealth * Settings.ValueModifiers.HealthScale - (totalHealth - healthAV.Value) + Settings.ValueModifiers.HealthShift;
                wasChanged = true;
            }

            if (Settings.ValueModifiers.DamageResistScale != 1 || Settings.ValueModifiers.DamageResistShift != 0)
            {
                var physResAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.DamageResist);
                var totalPhysRes = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.DamageResist);
                physResAV.Value = totalPhysRes * Settings.ValueModifiers.DamageResistScale - (totalPhysRes - physResAV.Value) + Settings.ValueModifiers.DamageResistShift;
                wasChanged = true;
            }

            if (Settings.ValueModifiers.EnergyResistScale != 1 || Settings.ValueModifiers.EnergyResistShift != 0)
            {
                var energyResAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.EnergyResist);
                var totalEnergyRes = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.EnergyResist);
                energyResAV.Value = totalEnergyRes * Settings.ValueModifiers.EnergyResistScale - (totalEnergyRes - energyResAV.Value) + Settings.ValueModifiers.EnergyResistShift;
                wasChanged = true;
            }

            if(wasChanged)
                Console.WriteLine("\t - Applying general value modifiers.");

            return wasChanged;
        }

        public static bool ApplyBalanceChanges(IPatcherState<IFallout4Mod, IFallout4ModGetter> state, Npc npcSetter)
        {
            var hasEntry = RaceEntries.TryGetValue(npcSetter.Race, out var raceEntry);
            var healthAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.Health);
            var physResAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.DamageResist);
            var energyResAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.EnergyResist);
            var totalHealth = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.Health);
            var totalPhysRes = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.DamageResist);
            var totalEnergyRes = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.EnergyResist);
            if (hasEntry && raceEntry.hasConfig)
            {
                if (raceEntry.configHealthMin != -1 && raceEntry.configHealthMax != -1)
                    healthAV.Value = GetScaledAV(totalHealth, raceEntry.healthMinMod, raceEntry.healthMaxMod, raceEntry.configHealthMin, raceEntry.configHealthMax) - (totalHealth - healthAV.Value);

                if (raceEntry.configPhysResMin != -1 && raceEntry.configPhysResMax != -1)
                    physResAV.Value = GetScaledAV(totalPhysRes, raceEntry.physResMin, raceEntry.physResMax, raceEntry.configPhysResMin, raceEntry.configPhysResMax) - (totalPhysRes - physResAV.Value);

                if (raceEntry.configEnergyResMin != -1 && raceEntry.configEnergyResMax != -1)
                    energyResAV.Value = GetScaledAV(totalEnergyRes, raceEntry.energyResMin, raceEntry.energyResMax, raceEntry.configEnergyResMin, raceEntry.configEnergyResMax) - (totalEnergyRes - energyResAV.Value);

                Console.WriteLine($"\t - Applying race entry settings.");
            }
            else // Race config entry not present, use general settings.
            {
                if (healthAV.Value == 0)
                    return false;

                healthAV.Value = totalHealth * Settings.GeneralScaling.HealthScale - (totalHealth - healthAV.Value) + Settings.GeneralScaling.HealthShift;
                physResAV.Value = totalPhysRes * Settings.GeneralScaling.DamageResistScale - (totalPhysRes - physResAV.Value) + Settings.GeneralScaling.DamageResistShift;
                energyResAV.Value = totalEnergyRes * Settings.GeneralScaling.EnergyResistScale - (totalEnergyRes - energyResAV.Value) + Settings.GeneralScaling.EnergyResistShift;
                Console.WriteLine("\t - Applying general scaling settings.");
            }

            return true;
        }

        public static bool ApplyKeywordBalance(IPatcherState<IFallout4Mod, IFallout4ModGetter> state, Npc npcSetter)
        {
            bool wasChanged = false;
            foreach (var keywordEntry in Settings.KeywordEntries)
            {
                if (!npcSetter.HasKeyword(keywordEntry.Keyword))
                    continue;

                wasChanged = true;
                var healthAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.Health);
                var physResAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.DamageResist);
                var energyResAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.EnergyResist);
                var totalHealth = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.Health);
                var totalPhysRes = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.DamageResist);
                var totalEnergyRes = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.EnergyResist);
                healthAV.Value = totalHealth * keywordEntry.KeywordScale.HealthScale - (totalHealth - healthAV.Value) + keywordEntry.KeywordScale.HealthShift;
                physResAV.Value = totalPhysRes * keywordEntry.KeywordScale.DamageResistScale - (totalPhysRes - physResAV.Value) + keywordEntry.KeywordScale.DamageResistShift;
                energyResAV.Value = totalEnergyRes * keywordEntry.KeywordScale.EnergyResistScale - (totalEnergyRes - energyResAV.Value) + keywordEntry.KeywordScale.EnergyResistShift;
                Console.WriteLine("\t - Applying keyword-based scaling settings.");
            }

            return wasChanged;
        }

        public static bool ApplyFactionBalance(IPatcherState<IFallout4Mod, IFallout4ModGetter> state, Npc npcSetter)
        {
            bool wasChanged = false;
            foreach (var factionEntry in Settings.FactionEntries)
            {
                if (!npcSetter.Factions.EmptyIfNull().Any(entry => entry.Faction.Equals(factionEntry.Faction)))
                    continue;

                wasChanged = true;
                var healthAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.Health);
                var physResAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.DamageResist);
                var energyResAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.EnergyResist);
                var totalHealth = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.Health);
                var totalPhysRes = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.DamageResist);
                var totalEnergyRes = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.EnergyResist);
                healthAV.Value = totalHealth * factionEntry.FactionScale.HealthScale - (totalHealth - healthAV.Value) + factionEntry.FactionScale.HealthShift;
                physResAV.Value = totalPhysRes * factionEntry.FactionScale.DamageResistScale - (totalPhysRes - physResAV.Value) + factionEntry.FactionScale.DamageResistShift;
                energyResAV.Value = totalEnergyRes * factionEntry.FactionScale.EnergyResistScale - (totalEnergyRes - energyResAV.Value) + factionEntry.FactionScale.EnergyResistShift;
                Console.WriteLine("\t - Applying faction-based scaling settings.");
            }

            return wasChanged;
        }

        public static bool ApplyPerkBalance(IPatcherState<IFallout4Mod, IFallout4ModGetter> state, Npc npcSetter)
        {
            bool wasChanged = false;
            foreach (var perkEntry in Settings.PerkEntries)
            {
                if (!npcSetter.Perks.EmptyIfNull().Any(entry => entry.Perk.Equals(perkEntry.Perk)))
                    continue;

                wasChanged = true;
                var healthAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.Health);
                var physResAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.DamageResist);
                var energyResAV = GetOrAddAV(npcSetter, Fallout4.ActorValueInformation.EnergyResist);
                var totalHealth = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.Health);
                var totalPhysRes = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.DamageResist);
                var totalEnergyRes = GetTotalAV(state, npcSetter, Fallout4.ActorValueInformation.EnergyResist);
                healthAV.Value = totalHealth * perkEntry.PerkScale.HealthScale - (totalHealth - healthAV.Value) + perkEntry.PerkScale.HealthShift;
                physResAV.Value = totalPhysRes * perkEntry.PerkScale.DamageResistScale - (totalPhysRes - physResAV.Value) + perkEntry.PerkScale.DamageResistShift;
                energyResAV.Value = totalEnergyRes * perkEntry.PerkScale.EnergyResistScale - (totalEnergyRes - energyResAV.Value) + perkEntry.PerkScale.EnergyResistShift;
                Console.WriteLine("\t - Applying perk-based scaling settings.");
            }

            return wasChanged;
        }

        public static void RunPatch(IPatcherState<IFallout4Mod, IFallout4ModGetter> state)
        {
            Console.WriteLine("Changing game settings.");
            if (Fallout4.GameSetting.fAVDHealthStartEndMult.TryResolve(state.LinkCache, out var startEndMult))
                (state.PatchMod.GameSettings.GetOrAddAsOverride(startEndMult) as GameSettingFloat)!.Data = Settings.fAVDHealthStartEndMult;

            if (Fallout4.GameSetting.fNPCHealthLevelBonus.TryResolve(state.LinkCache, out var npcBonus))
                (state.PatchMod.GameSettings.GetOrAddAsOverride(npcBonus) as GameSettingFloat)!.Data = Settings.fNPCHealthLevelBonus;

            if (Fallout4.GameSetting.fPCHealthLevelBonus.TryResolve(state.LinkCache, out var pcBonus))
                (state.PatchMod.GameSettings.GetOrAddAsOverride(pcBonus) as GameSettingFloat)!.Data = Settings.fPCHealthLevelBonus;

            if (Fallout4.GameSetting.fHealthEnduranceOffset.TryResolve(state.LinkCache, out var enduranceOffset))
                (state.PatchMod.GameSettings.GetOrAddAsOverride(enduranceOffset) as GameSettingFloat)!.Data = Settings.fHealthEnduranceOffset;

            var enduranceMult = new GameSettingFloat(state.PatchMod, "fHealthEnduranceMult")
            {
                FormVersion = 131,
                Data = Settings.fHealthEnduranceMult
            };
            state.PatchMod.GameSettings.Add(enduranceMult);

            Console.WriteLine("Populating race entries.");
            foreach (var npcGetter in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                if (npcGetter.Equals(Fallout4.Npc.Player) || npcGetter.UseTemplateActors.HasFlag(Npc.TemplateActorType.Stats))
                    continue;

                if (!RaceEntries.TryGetValue(npcGetter.Race, out RaceEntry raceEntry))
                {
                    ConfigRaceEntry? configEntry = null;
                    try
                    {
                        configEntry = Settings.RaceEntries.First(entry => entry.Races.Any(subEntry => subEntry.Equals(npcGetter.Race)));
                    }
                    catch { }

                    raceEntry = new RaceEntry() { hasConfig = configEntry is not null, configHealthMin = configEntry?.MinimumHealth ?? -1, configHealthMax = configEntry?.MaximumHealth ?? -1, configPhysResMin = configEntry?.MinimumPhysicalResist ?? -1, configPhysResMax = configEntry?.MaximumPhysicalResist ?? -1, configEnergyResMin = configEntry?.MinimumEnergyResist ?? -1, configEnergyResMax = configEntry?.MaximumEnergyResist ?? -1 };
                }

                float totalHealth = GetTotalAV(state, npcGetter, Fallout4.ActorValueInformation.Health);
                float totalPhysRes = GetTotalAV(state, npcGetter, Fallout4.ActorValueInformation.DamageResist);
                float totalEnergyRes = GetTotalAV(state, npcGetter, Fallout4.ActorValueInformation.EnergyResist);
                if (raceEntry.healthMin > totalHealth && totalHealth > 0) // Exception for 0 to not mess up values with certain templates or scaling NPCs.
                {
                    raceEntry.healthMin = totalHealth;
                    raceEntry.healthMinMod = totalHealth;
                }
                else if (raceEntry.healthMax < totalHealth)
                {
                    raceEntry.healthMax = totalHealth;
                    raceEntry.healthMaxMod = totalHealth;
                }

                if (raceEntry.physResMin > totalPhysRes)
                    raceEntry.physResMin = totalPhysRes;
                else if (raceEntry.physResMax < totalPhysRes)
                    raceEntry.physResMax = totalPhysRes;

                if (raceEntry.energyResMin > totalEnergyRes)
                    raceEntry.energyResMin = totalEnergyRes;
                else if (raceEntry.energyResMax < totalEnergyRes)
                    raceEntry.energyResMax = totalEnergyRes;

                if (npcGetter.Level is NpcLevel npcLevel)
                {
                    if (raceEntry.lvlMin > npcLevel.Level && totalHealth > 0) raceEntry.lvlMin = npcLevel.Level;
                    if (raceEntry.lvlMax < npcLevel.Level) raceEntry.lvlMax = npcLevel.Level;
                }

                RaceEntries[npcGetter.Race] = raceEntry;
            }

            Console.WriteLine("Race entries populated.");

            foreach (var npcGetter in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                if (npcGetter.Equals(Fallout4.Npc.Player))
                    continue;

                Console.WriteLine($"Processing {npcGetter}");

                bool wasChanged = false;
                Npc npcSetter = npcGetter.DeepCopy();
                wasChanged |= UnlevelNPC(npcSetter);
                wasChanged |= BalanceLeveledNPCs(state, npcSetter, wasChanged);
                wasChanged |= ApplyBalanceChanges(state, npcSetter);
                wasChanged |= ApplyKeywordBalance(state, npcSetter);
                wasChanged |= ApplyFactionBalance(state, npcSetter);
                wasChanged |= ApplyPerkBalance(state, npcSetter);
                wasChanged |= ApplyValueModifiers(state, npcSetter);

                if (wasChanged)
                    state.PatchMod.Npcs.GetOrAddAsOverride(npcSetter);
            }
        }
    }
}
